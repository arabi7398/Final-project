---
- name: Deploy Flask Application
  hosts: localhost # Replace with your target server's hostname or IP address
  become: no  # Use sudo to run commands as root

  vars:
    docker_image_name: "omarelaraby987/flask-app"  # Define the image name as a variable

  tasks:
    - name: Ensure Docker is installed
      apt:
        name: docker.io
        state: present
      when: ansible_os_family == "Debian"

    - name: Pull the latest Docker image
      docker_image:
        name: "{{ docker_image_name }}"
        tag: "{{ docker_tag }}"  # Use the passed docker_tag variable
        pull: yes

    - name: Stop existing container
      docker_container:
        name: flask-app  # Replace with your container name
        state: stopped
      ignore_errors: yes  # Ignore errors if the container is not running

    - name: Remove existing container
      docker_container:
        name: flask-app  # Replace with your container name
        state: absent
      ignore_errors: yes  # Ignore errors if the container does not exist

    - name: Run new container
      docker_container:
        name: flask-app  # Replace with your container name
        image: "{{ docker_image_name }}:{{ docker_tag }}"  # Use the passed docker_tag variable
        state: started
        restart_policy: unless-stopped  # Restart policy for the container
        published_ports:
          - "5000:5000"  # Map host port 5000 to container port 5000 (adjust as needed)
        env:
          FLASK_ENV: production  # Example environment variable for Flask

    - name: Clean up unused images
      docker_image:
        name: "{{ docker_image_name }}"
        state: absent
        filter: dangling=true  # Removes dangling images only
