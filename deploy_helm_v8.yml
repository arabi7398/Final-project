- name: Deploy Flask Application with Prometheus and Grafana
  hosts: localhost
  remote_user: jenkins  # Specify the Jenkins user
  become: yes  # Use sudo to run commands as root

  tasks:
    - name: Ensure Docker is installed
      apt:
        name: docker.io
        state: present
      when: ansible_os_family == "Debian"

    - name: Get all Docker image tags
      shell: "docker images --format '{{ \"{{.Tag}}\" }}'  omarelaraby987/flask-app"
      register: tags_output
      changed_when: false

    - name: Echo Docker image tags
      debug:
        msg: "Docker image tags: {{ tags_output.stdout_lines }}"

    - name: Set the latest tag variable
      set_fact:
        latest_tag: "{{ tags_output.stdout_lines | sort(reverse=True) | first }}"

    - name: Debug latest tag
      debug:
        msg: "Latest Docker tag is {{ latest_tag }}"

    - name: Create helm chart directory structure
      file:
        path: /var/lib/jenkins/workspace/CI-CD_test_2/flask-app
        state: directory

    - name: Create templates directory
      file:
        path: /var/lib/jenkins/workspace/CI-CD_test_2/flask-app/templates
        state: directory

    - name: Create Chart.yaml
      copy:
        dest: /var/lib/jenkins/workspace/CI-CD_test_2/flask-app/Chart.yaml
        content: |
          apiVersion: v2
          name: flask-app
          version: 0.1.0

    - name: Create values.yaml with dynamic Docker tag
      copy:
        dest: /var/lib/jenkins/workspace/CI-CD_test_2/flask-app/values.yaml
        content: |
          image:
            repository: "omarelaraby987/flask-app"
            tag: "{{ latest_tag }}"  # Use the latest_tag variable fetched from Docker

    - name: Create deployment.yaml
      copy:
        dest: /var/lib/jenkins/workspace/CI-CD_test_2/flask-app/templates/deployment.yaml
        content: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: flask-app
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: flask-app
            template:
              metadata:
                labels:
                  app: flask-app
              spec:
                containers:
                  - name: flask-app
                    image: "omarelaraby987/flask-app:{{ latest_tag }}"
                    ports:
                      - containerPort: 5000
                    readinessProbe:
                      httpGet:
                        path: /metrics
                        port: 5000
                    livenessProbe:
                      httpGet:
                        path: /
                        port: 5000

    - name: Create service.yaml
      copy:
        dest: /var/lib/jenkins/workspace/CI-CD_test_2/flask-app/templates/service.yaml
        content: |
          apiVersion: v1
          kind: Service
          metadata:
            name: flask-app
          spec:
            type: LoadBalancer
            ports:
              - port: 5000
            selector:
              app: flask-app

    - name: Install Helm chart for Flask App
      community.kubernetes.helm:
        kubeconfig: /var/lib/jenkins/.kube/config
        release_name: flask-app
        chart_ref: "/var/lib/jenkins/workspace/CI-CD_test_2/flask-app"
        release_values:
          image:
            repository: "omarelaraby987/flask-app"
            tag: "{{ latest_tag }}"
        create_namespace: true
        release_namespace: default
      register: helm_install_result

    - name: Install Prometheus using Helm
      community.kubernetes.helm:
        name: prometheus
        chart_ref: prometheus-community/prometheus
        kubeconfig: /var/lib/jenkins/.kube/config
        release_namespace: monitoring
        release_values:
          server:
            global:
              scrape_interval: 15s
            scrape_configs:
              - job_name: 'flask-app'
                metrics_path: '/metrics'
                static_configs:
                  - targets: ['flask-app.default.svc.cluster.local:5000']

    - name: Install Grafana using Helm
      community.kubernetes.helm:
        name: grafana
        chart_ref: grafana/grafana
        kubeconfig: /var/lib/jenkins/.kube/config
        release_namespace: monitoring
        release_values:
          adminUser: admin
          adminPassword: admin
          datasources:
            datasources.yaml:
              apiVersion: 1
              datasources:
                - name: Prometheus
                  type: prometheus
                  url: http://prometheus-server.monitoring.svc.cluster.local
                  access: proxy
                  isDefault: true

    - name: Debug Helm install result for Flask app
      debug:
        var: helm_install_result
